`ifndef MR_CONFIG_I
`define MR_CONFIG_I

`ifndef YOSYS
// SEE: https://github.com/YosysHQ/yosys/issues/2923
`define TYPECAST(TYPE, VALUE) TYPE'(VALUE)
`else
`define TYPECAST(TYPE, VALUE) (VALUE)
`endif

`ifndef XLEN
`define XLEN 32
`endif

`define XLEN_BYTES (`XLEN/8)
`define XLEN_GRAN ($clog2(`XLEN) - 3)
`define CSRLEN 12

`ifndef IALIGN
`define IALIGN 32
`endif

`ifdef HAVE_DISASS
`include "rv_disass.svi"
`endif

`ifndef MEMSIZE
//`define MEMSIZE 32*1024
`define MEMSIZE 512*1024
`endif

`ifndef RETQUEUE_SIZE
`define RETQUEUE_SIZE 8
`endif
`define INSTID_BITS ($clog2(`RETQUEUE_SIZE))

`define IMAXLEN 32
`define REGSEL_BITS 5

`define E_ALU_OP_BITS 5
typedef enum logic [`E_ALU_OP_BITS-1:0] {
    ALU_ADD,
    ALU_SUB,
    ALU_AND,
    ALU_OR,
    ALU_XOR,
    ALU_SH_L,
    ALU_SH_RA,
    ALU_SH_RL,
    ALU_CMP_LT,
    ALU_CMP_LTU
} e_aluops;

`define E_BR_OP_BITS 3
typedef enum logic [`E_BR_OP_BITS-1:0] { 
    BROP_NEVER,
    BROP_ALWAYS, // Implicit "payload += 4"
    BROP_EQ,
    BROP_NE,
    BROP_LT,
    BROP_LTU,
    BROP_GE,
    BROP_GEU
 } e_brops;

`define E_PAYLOAD_BITS 3
typedef enum logic [`E_PAYLOAD_BITS-1:0] {
    PAYLOAD_NONE,
    PAYLOAD_INSTDATA,
    PAYLOAD_BADADDR,
    PAYLOAD_STOREDATA,
    PAYLOAD_BRANCHOFFSET
} e_payload;

`define E_MEM_OP_BITS 2
typedef enum logic [`E_MEM_OP_BITS-1:0] {
    MEMOP_NONE,
    MEMOP_LOAD_MEM,
    MEMOP_STORE_MEM
    // Something something CSRs
} e_memops;

`define E_DISPATCH_KIND_BITS 1
typedef enum logic [`E_DISPATCH_KIND_BITS-1:0] {
    DISPATCH_NORMAL,
    DISPATCH_CSR
} e_dispatch_kind;

`define E_MEM_SZ_BITS 2
typedef enum logic [`E_MEM_SZ_BITS-1:0] {
    MEMSZ_1B = 0,
    MEMSZ_2B = 1,
    MEMSZ_4B = 2,
    MEMSZ_8B = 3
} e_memsz;

// These two are a union
`define E_TRAPTYPE_BITS 4
typedef enum logic [`E_TRAPTYPE_BITS-1:0] {
    TRAP_INST_MISALIGNED = 0,
    TRAP_INST_FAULT = 1,
    TRAP_ILLEGAL_INST = 2,
    TRAP_BREAKPOINT = 3,
    TRAP_LOAD_MISALIGNED = 4,
    TRAP_LOAD_FAULT = 5,
    TRAP_STORE_AMO_MISALIGNED = 6,
    TRAP_STORE_AMO_FAULT= 7,
    TRAP_ECALL_U = 8,
    TRAP_ECALL_S = 9,
    TRAP_ECALL_M = 11,
    TRAP_INST_PAGEF = 12,
    TRAP_LOAD_PAGEF = 13,
    TRAP_STORE_AMO_PAGEF = 15
} e_traptype;
typedef enum logic [`E_TRAPTYPE_BITS-1:0] {
    INT_SW_U    = 0,
    INT_SW_S    = 1,
    INT_SW_M    = 3,
    INT_TIMER_U = 4,
    INT_TIMER_S = 5,
    INT_TIMER_M = 7,
    INT_EXT_U   = 8,
    INT_EXT_S   = 9,
    INT_EXT_M   = 11
} e_inttype;

typedef enum logic [`CSRLEN-1:0] {
    // Table 2.4: Machine Information Registers
    CSR_MVENDORID = 'hF11,
    CSR_MARCHID   = 'hF12,
    CSR_MIMPID    = 'hF13,
    CSR_MHARTID   = 'hF14,
    // Table 2.4: Machine Trap Setup
    CSR_MSTATUS    = 'h300,
    CSR_MISA       = 'h301,
    CSR_MEDELEG    = 'h302,
    CSR_MIDELEG    = 'h303,
    CSR_MIE        = 'h304,
    CSR_MTVEC      = 'h305,
    CSR_MCOUNTEREN = 'h306,
    // Table 2.4: Machine Trap Handling
    CSR_MSCRATCH = 'h340,
    CSR_MEPC     = 'h341,
    CSR_MCAUSE   = 'h342,
    CSR_MTVAL    = 'h343,
    CSR_MIP      = 'h344,
    // Table 2.5: Machine Counters/Timers
    CSR_MCYCLE    = 'hB00,
    CSR_MINSTRET  = 'hB02,
    // RV32 variants
    CSR_MCYCLEH   = 'hB80,
    CSR_MINSTRETH = 'hB82,
    // TODO: perfcounters 3-31



    // Because I must have trailing commas
    CSR_DUMMY = 'hFFF
} e_csr_addr;

// Official RISC-V non-C ops (inst[6:2])
typedef enum logic [4:0] {
    RV_LOAD      = 5'b00000,
    RV_LOAD_FP   = 5'b00001,
    RV_CUSTOM0   = 5'b00010,
    RV_MISC_MEM  = 5'b00011,
    RV_OP_IMM    = 5'b00100,
    RV_AUIPC     = 5'b00101,
    RV_OP_IMM_32 = 5'b00110,
    RV_RSVD_48B1 = 5'b00111,
    RV_STORE     = 5'b01000,
    RV_STORE_FP  = 5'b01001,
    RV_CUSTOM1   = 5'b01010,
    RV_AMO       = 5'b01011,
    RV_OP        = 5'b01100,
    RV_LUI       = 5'b01101,
    RV_OP_32     = 5'b01110,
    RV_RSVD_64B  = 5'b01111,
    RV_MADD      = 5'b10000,
    RV_MSUB      = 5'b10001,
    RV_NMSUB     = 5'b10010,
    RV_NMADD     = 5'b10011,
    RV_OP_FP     = 5'b10100,
    RV_RSVD_1    = 5'b10101,
    RV_CUSTOM2   = 5'b10110,
    RV_RSVD_48B2 = 5'b10111,
    RV_BRANCH    = 5'b11000,
    RV_JALR      = 5'b11001,
    RV_RSVD2     = 5'b11010,
    RV_JAL       = 5'b11011,
    RV_SYSTEM    = 5'b11100,
    RV_RSVD3     = 5'b11101,
    RV_CUSTOM3   = 5'b11110,
    RV_RSVD_80B  = 5'b11111
} e_rvop;

typedef enum logic [2:0] { 
    // ALU ops
    RVF3_ADD = 3'b000,
    RVF3_SLT = 3'b010,
    RVF3_SLTU = 3'b011,
    RVF3_XOR = 3'b100,
    RVF3_OR = 3'b110,
    RVF3_AND = 3'b111,
    RVF3_SL = 3'b001,
    RVF3_SR = 3'b101
 } e_rvf3_alu;

typedef enum logic [2:0] { 
    // MEM widths
    RVF3_BYTE = 3'b000,
    RVF3_HALF = 3'b001,
    RVF3_WORD = 3'b010,
    RVF3_UBYTE = 3'b100,
    RVF3_UHALF = 3'b101,
    // rv64 only:
    RVF3_QUAD = 3'b011,
    RVF3_UWORD = 3'b110
} e_rvf3_mem;

typedef enum logic [2:0] { 
    // Conditional branch types
    RVF3_BEQ  = 3'b000,
    RVF3_BNE  = 3'b001,
    RVF3_BLT  = 3'b100,
    RVF3_BGE  = 3'b101,
    RVF3_BLTU = 3'b110,
    RVF3_BGEU = 3'b111
} e_rvf3_br;

typedef enum logic [2:0] { 
    // System inst types
    RVF3_EXT    = 3'b000,
    RVF3_CSRRW  = 3'b001,
    RVF3_CSRRS  = 3'b010,
    RVF3_CSRRC  = 3'b011,
    // reserved?
    RVF3_CSRRWI  = 3'b101,
    RVF3_CSRRSI  = 3'b110,
    RVF3_CSRRCI  = 3'b111
} e_rvf3_sys;


`endif // MR_CONFIG_I

